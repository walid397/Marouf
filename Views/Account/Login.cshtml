@model Marofh.Models.LoginViewModel
@using Resources
@{
    var culture = System.Threading.Thread.CurrentThread.CurrentUICulture.Name.ToLowerInvariant();

    if (culture.Contains("en-us"))
    {
        ViewBag.Title = "Marofh";
        ViewBag.Parent = "Login";
    }
    else
    {
        ViewBag.Title = "تسجيل الدخول";
        ViewBag.Parent = "الصفحات";
    }

    Layout = "~/Views/Shared/_LayoutInner.cshtml";
}

@using (Html.BeginForm("Login", "Account", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    @Html.AntiForgeryToken()

    <!-- عرض الأخطاء العامة -->
    if (!ViewData.ModelState.IsValid)
    {
        <div class="alert alert-danger">
            <ul>
                @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                {
                    <li>@error.ErrorMessage</li>
                }
            </ul>
        </div>
    }

    <div class="wizard-content-1 pos-flex clearfix animated fadeInUp wow" data-wow-delay="0.5s">
        <div class="steps d-inline-block clearfix w-100">
            <span class="bg-shape"></span>
            <h2 class="text-center loginTilte">@Resource.Login</h2>
            <p class="text-center">@Resource.PleaseFillinYourLoginInformation</p>

            @*<div class="details-form-area">
                <div class="col-12">
                    <div class="form-input-inner position-relative has-float-label">
                        @Html.TextBoxFor(m => m.Email, new { @class = "form-control", placeholder = @Resource.UserName, type = "email", required = "required", oninvalid = $"this.setCustomValidity('{Resource.EnterYourEmail}')", oninput = "setCustomValidity('')" })
                        @Html.LabelFor(m => m.Email, @Resource.Email)
                        @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })

                        <div class="icon-bg text-center">
                            <i class="fas fa-envelope"></i>
                        </div>
                    </div>
                </div>*@

                <div class="details-form-area">
                    <div class="col-12">
                        <div class="form-input-inner position-relative has-float-label">
                            @Html.TextBoxFor(m => m.Identifier, new
                            {
                @class = "form-control",
                placeholder = "البريد الإلكتروني أو رقم الجوال",
                required = "required",
                oninvalid = "this.setCustomValidity('من فضلك أدخل البريد أو رقم الجوال')",
                oninput = "setCustomValidity('')"
            })
                            @Html.Label("Identifier", "البريد الإلكتروني أو رقم الجوال")
                            @Html.ValidationMessage("Identifier", "", new { @class = "text-danger" })

                        </div>
                    </div>
                </div>
                <div class="col-12">
                    <div class="form-input-inner position-relative has-float-label">
                        <span toggle="#Password" class="fa fa-fw fa-eye field-icon toggle-password toggle-password1"></span>

                        @Html.PasswordFor(m => m.Password, new { @class = "form-control Password", placeholder = @Resource.Password, id = "Password", required = "required", oninvalid = $"this.setCustomValidity('{Resource.EnterPassword}')", oninput = "setCustomValidity('')", onfocus = "getCurrentUrl();" })
                        @Html.LabelFor(m => m.Password, @Resource.Password)
                        @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger" })

                        <div class="icon-bg text-center">
                            <i class="fas fa-lock-alt"></i>
                        </div>
                    </div>
                </div>

                @*<div class="col-12">
            <div class="form-input-inner position-relative has-float-label">
                @Html.TextBoxFor(m => m.Mobile, new { @class = "form-control", placeholder = @Resource.PhoneNumber, id = "Mobile", required = "required", oninvalid = "this.setCustomValidity('')", oninput = "setCustomValidity('')" })
                @Html.LabelFor(m => m.Mobile, @Resource.PhoneNumber)
                @Html.ValidationMessageFor(m => m.Mobile, "", new { @class = "text-danger" })

                <div class="icon-bg text-center">
                    <i class="fas fa-phone"></i>
                </div>
            </div>
        </div>*@
                <!--<div class="col-12">

    <div class="form-input-inner" position-relative has-float-label">
        <label for="phoneNumber" class="mb-1 text-semibold">@Resource.MobileNo</label>
        <span class="required">*</span>-->
                @*<input type="number" oninput="javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);" class="form-control" name="Mobile" id="Mobile" placeholder="05XXXXXXXX" required orequired onkeyup="return CheckMobile(this)" maxlength="10">*@

                <!--<input id="Mobile" name="Mobile" type="number" oninput="javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);" class="form-control" placeholder="05XXXXXXXX" required orequired onkeyup="return CheckMobile(this)" maxlength="10">
        <span id="errorMessage2"></span>
        <span id="SpanMobileValid" style="display:none;">false</span>

    </div>
    </div>-->
                @*<div class="col-12">


                    <div class="form-input-inner position-relative has-float-label">
                        @Html.TextBoxFor(m => m.Mobile, new
                   {
                       @class = "form-control",
                       placeholder = "05XXXXXXXX",  // ← بدل @Resource لو عايز ثابت
                       id = "Mobile",
                       required = "required",
                       maxlength = "10",
                       oninput = "if (this.value.length > 10) this.value = this.value.slice(0,10);",
                       oninvalid = "this.setCustomValidity('من فضلك أدخل رقم جوال صحيح')",
                       onkeyup = "return CheckMobile(this)"
                   })
                        @Html.LabelFor(m => m.Mobile, "رقم الجوال")
                        @Html.ValidationMessageFor(m => m.Mobile, "", new { @class = "text-danger" })

                        <div class="icon-bg text-center">
                            <i class="fas fa-phone"></i>
                        </div>
                    </div>
                </div>*@

                <div class="col-12">
                    <button class="btn btnlogin" type="submit">
                        @Resource.Login <i class="fa fa-check-circle pl-1"></i>
                    </button>
                </div>

                <div class="forgetpassord pt-5">
                    <input type="checkbox" name="RememberMe" value="true" id="RememberMe" class="form-checkbox pull-left" />
                    <label class="pull-left text-capitalize text-bold">@Resource.RememberMeNextTime</label>
                    <input id="rurl" name="rurl" type="text" style="visibility:collapse;display:none" />
                    <a href="/Account/ForgotPassword">@Resource.ForgetPassword</a>
                </div>

                <div class="forgetpassord">
                    <p class="text-warning font-weight-bold"> @ViewBag.Result </p>
                </div>
            </div>
                    </div>
                @*</div>*@
                }

                @section Scripts {
                    <script>
        function getCurrentUrl() {
            var rurl = document.getElementById('rurl');
            const loc = window.location.href;
            rurl.value = loc;
        }

         function CheckMobile(mobile) {

         $.ajax({
             type: "POST",
             url: '@Url.Action("CheckMobile", "Account")',//  this for calling the web method function in controller.
             data: '{mobile: "' + mobile.value + '" }',// user name value
             contentType: "application/json; charset=utf-8",
             dataType: "json",
             success: OnSuccess,
             failure: function (response) {
                 alert(response);
             }
         });
     };
 //function OnSuccess
 function OnSuccess(response) {
     var msg = $("#errorMessage1");
     var dublicatedMobile = $("#errorMessage2");
     var dublicatedEmail = $("#errorMessage3");



     switch (response) {
         case "false":
             msg.show();
             msg.css("color","red");
             msg.html('@Resource.UserNameALreadyRegistered');
             var sendbtn = document.getElementById('registerbtn');
             var checker = document.getElementById('acceptTerms');
             sendbtn.disabled = checker.disabled = response
             $('#SpanNameValid').text("false");





             break;
         case "true":
             msg.show();
             msg.css("color", "green");
             msg.html('@Resource.UserNameIsAvailable');
             var sendbtn = document.getElementById('registerbtn');
             var checker = document.getElementById('acceptTerms');
               checker.disabled = false
             $('#SpanNameValid').text("true");
             if (Formvalid() == true) {
                 checker.disabled = false;
              //   alert("Enabled");
             }
             else {
                 checker.disabled = true;
               //  alert("disabled");
             }


             break;

         case "NotEnglish":
             msg.show();
             msg.css("color","red");
                 msg.html('@Resource.UserNameMustBeEnglish');
             var sendbtn = document.getElementById('registerbtn');
             var checker = document.getElementById('acceptTerms');
             sendbtn.disabled = checker.disabled = true;
             $('#SpanNameValid').text("false");

             break;
         case "TooShort":
             msg.show();
             msg.css("color","red");
              msg.html('@Resource.UserNameMustBeNotLess8Char');
             var sendbtn = document.getElementById('registerbtn');
             var checker = document.getElementById('acceptTerms');
             sendbtn.disabled = checker.disabled = true;
             $('#SpanNameValid').text("false");

             break;
         case "Registered":
             dublicatedEmail.show();
             dublicatedEmail.css("color","red");
            dublicatedEmail.html('@Resource.EmailAlreadyRegistered');
             var sendbtn = document.getElementById('registerbtn');
             var checker = document.getElementById('acceptTerms');
             sendbtn.disabled = checker.disabled = true;
             $('#SpanEmailValid').text("false");



             break;
         case "NotVaild":
             dublicatedEmail.show();
             dublicatedEmail.css("color","red");
            dublicatedEmail.html('@Resource.PleaseEnterEmailInCorrectFormat');
             var sendbtn = document.getElementById('registerbtn');
             var checker = document.getElementById('acceptTerms');
             sendbtn.disabled = checker.disabled = true;
             $('#SpanEmailValid').text("false");

             break;
         case "MobileExisted":
             dublicatedMobile.show();
             dublicatedMobile.css("color", "red");
             dublicatedMobile.html('@Resource.MobileAlreadyRegistered');
             var sendbtn = document.getElementById('registerbtn');
             var checker = document.getElementById('acceptTerms');
             sendbtn.disabled = checker.disabled = true;
             $('#SpanMobileValid').text("false");

             break;
         case "LessThanTen":
             dublicatedMobile.show();
             dublicatedMobile.css("color", "red");
             dublicatedMobile.html('@Resource.MobileMustBe10Number');
             var sendbtn = document.getElementById('registerbtn');
             var checker = document.getElementById('acceptTerms');
             sendbtn.disabled = checker.disabled = true;
             $('#SpanMobileValid').text("false");

             break;

         case "MobileNotExisted":
             dublicatedMobile.show();
             dublicatedMobile.css("color", "green");
             dublicatedMobile.html("");
             var sendbtn = document.getElementById('registerbtn');
             var checker = document.getElementById('acceptTerms');
             $('#SpanMobileValid').text("true");
             //sendbtn.disabled = checker.disabled = true;

             if (Formvalid() == true) {
                 checker.disabled = false;
                // alert("Enabled");
             }
             else {
                 checker.disabled = true;
                // alert("disabled");
             }


             break;
         case "NotRegistered":
             dublicatedEmail.show();
             dublicatedEmail.css("color", "green");
             dublicatedEmail.html("");
             var sendbtn = document.getElementById('registerbtn');
             var checker = document.getElementById('acceptTerms');
             $('#SpanEmailValid').text("true");

             if (Formvalid() == true) {
                 checker.disabled = false;
                 //alert("Enabled");
             }
             else {
                 checker.disabled = true;
               //  alert("disabled");
             }

             break;






     }
 }
                    </script>

                    <style>
                        .has-float-label {
                            position: relative;
                        }

                            .has-float-label input {
                                background: rgba(128,128,128,0.05);
                                padding-right: 45px;
                                padding-top: 20px;
                                border: 1px solid #ccc;
                                color: #000;
                            }

                            .has-float-label label {
                                position: absolute;
                                top: 50%;
                                right: 45px;
                                transform: translateY(-50%);
                                font-size: 14px;
                                font-weight: bold;
                                color: #aaa;
                                background: transparent;
                                transition: 0.2s ease all;
                                pointer-events: none;
                                z-index: 3;
                            }

                            .has-float-label input:focus + label,
                            .has-float-label input:not(:placeholder-shown) + label {
                                top: -10px;
                                right: 36px;
                                background: #ffc107;
                                color: #000;
                                padding: 4px 10px;
                                border-radius: 5px;
                                font-size: 14px;
                            }

                        .icon-bg {
                            position: absolute;
                            top: 50%;
                            transform: translateY(-50%);
                            right: 15px;
                            color: #ffc107;
                            z-index: 1;
                        }

                        .text-danger {
                            color: #dc3545;
                            font-size: 14px;
                            margin-top: 5px;
                            display: block;
                        }
                    </style>
                }
